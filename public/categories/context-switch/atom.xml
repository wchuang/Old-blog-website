<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Context-switch | @wchuang's Blog]]></title>
  <link href="http://blog.wchuang.me/categories/context-switch/atom.xml" rel="self"/>
  <link href="http://blog.wchuang.me/"/>
  <updated>2015-10-14T01:57:52+08:00</updated>
  <id>http://blog.wchuang.me/</id>
  <author>
    <name><![CDATA[WEI-CHENG HUANG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Process Versus Thread]]></title>
    <link href="http://blog.wchuang.me/post/2014/08/20/process-versus-thread/"/>
    <updated>2014-08-20T17:44:28+08:00</updated>
    <id>http://blog.wchuang.me/post/2014/08/20/process-versus-thread</id>
    <content type="html"><![CDATA[<p>Process: 會在 CPU 的虛擬記憶體中分配 address，而每個 process 的 memory space 是彼此獨立且分開的 (系統資源不共享)。系統真正同時在運行的 process 數量最多不超過 CPU 數量，所以系統核心會在使用者無法察覺的時間內快速切換不同的 process，以達成同時處理多個 process 的假象。這裡又會牽扯到 <a href="http://goo.gl/X6Aypg">context switch</a>、<a href="http://goo.gl/C5wbHx">scheduling</a> 的問題。</p>

<p>Thread: 同個 process 可能由多個不同的 thread 所組成，這些 thread 共享 process 的資料以及資源，但有可能執行不同區塊的程式碼。在處理資源分配的時候，常會有 <a href="http://goo.gl/8yFi">synchronization</a> 或 <a href="http://goo.gl/41N9k">deadlock</a> 等問題。</p>

<p>總之，可以看成 process 是一個執行中的 programs，而 thread 就像是與程式同時運行的 functions。</p>
]]></content>
  </entry>
  
</feed>
